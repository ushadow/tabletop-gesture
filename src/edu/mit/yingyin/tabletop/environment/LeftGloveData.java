package edu.mit.yingyin.tabletop.environment;

import handtracking.glove.ShewchuckReader;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3f;

import colored.glove.Pattern;
import colored.glove.Polygon2D;
import colored.glove.Seam;

import rywang.math.BoundingBox;
import rywang.scene.BasicScene;
import rywang.util.ObjectIO;

/**
 * Manages the left hand cloth pattern and scales it
 * 
 * @author rywang
 *
 */
public class LeftGloveData {
  
  public static final String PREFIX = LeftGloveTrackingExample.getInstance().getPrefix() + "/glove";

  private static final long serialVersionUID = 1L;
  
  public static final float Y_SCALE = 242.0f;
  
  public static BufferedImage getImage() {
    try {
      BufferedImage image = ImageIO.read(new File(PREFIX + "/MyLeftGlove.png"));
      return image;
    } catch (IOException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
  }
  
  public static Pattern readPattern() throws IOException {
    Pattern pattern = readPatternUnscaled();
    scalePattern(pattern);
    return pattern;
  }

  @SuppressWarnings("unchecked")
  public static Pattern readPatternUnscaled() throws IOException {
    String triangleOutputPrefix = PREFIX + "/MyLeftHand.plist.1";
    String seamsFile = PREFIX + "/MyLeftHand.plist.seams";
    String polygonsFile = PREFIX + "/MyLeftHand.plist";
    
    Pattern pattern = new Pattern();
    // read the polygons and seams generated by the pattern tracer
    pattern.setPolygons((List<Polygon2D>) ObjectIO.readObject(polygonsFile));
    pattern.setSeams((List<Seam>) ObjectIO.readObject(seamsFile));

    // read the mesh from the Shewchuk's triangle output
    BasicScene scene = ShewchuckReader
        .readTriangleFileToScene(triangleOutputPrefix);
    scene = ShewchuckReader.filterExternalTriangles(scene, pattern
        .getPolygonsFragile());
    // filter the mesh 
    pattern.setMesh(scene);
    return pattern;
  }
  
  public static void scalePattern(Pattern pattern) {
    BasicScene scene = pattern.getMesh();
    BoundingBox box = new BoundingBox();
    box.combine(scene);
    Point3f center = box.getCenter();
    Vector3f v = new Vector3f();
    for (int i=0; i<scene.getNumVertices(); i++) {
      v.set(scene.getVertexFragile(i));
      v.sub(center);
      v.scale(Y_SCALE / box.getYRange());
      v.add(center);
      scene.getVertexFragile(i).set(v);
    }
  }
}
